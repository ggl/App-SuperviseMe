#!/usr/bin/env perl

package    ## Hide from PAUSE and Dist::Zilla
  supervise_me;

use strict;
use warnings;

use Getopt::Std;
use YAML::Tiny;

use lib '../lib';
use App::Sv;

# ABSTRACT: supervises a list of commands
# VERSION
# AUTHORITY

my %opt;
getopts('dc:', \%opt);

# read config
my $conf;
my $yt = YAML::Tiny->new();
if ($opt{c} && -f $opt{c}) {
	$conf = $yt->read($opt{c})
		or die "Cannot open config file \'$opt{c}\': $!";
	$conf = $conf->[0];
}
else {
	my $cf = $ENV{SV_HOME} ? "$ENV{SV_HOME}/sv.yml" : "$ENV{HOME}/.sv/sv.yml";
	die "No config file found" unless -f $cf;
	$conf = $yt->read($cf)
		or die "Cannot open config file \'$cf\': $!";
	$conf = $conf->[0];
}

# daemonize
if ($opt{d} || $conf->{global}->{daemon}) {
	open(STDIN, "</dev/null");
	open(STDOUT, "+>/dev/null");
	open(STDERR, "+>/dev/null");
	my $pid = fork();
	exit 0 if $pid;
}

my $s = App::Sv->new($conf);
$s->run;

__END__

=encoding utf8

=head1 SYNOPSIS

    # Read commands to keep up from STDIN
    $ supervise_me
    Enter commands to supervise, one per line
    plackup -p 3010 ./sites/x/app.psgi
    plackup -p 3011 ./sites/y/app.psgi
    ^D

    # Script it
    $ cat script.me
    plackup -p 3010 ./sites/x/app.psgi
    plackup -p 3011 ./sites/y/app.psgi
    $ supervise_me < script.me

=head1 DESCRIPTION

The C<supervise_me> command is a simple supervisor for multiple process.

It reads a list of commands to execute from C<< STDIN >> and starts each one,
and then monitors their execution. If one of the program dies, the supervisor
will restart it after a small 1 second pause.

You can restart the supervised process with C<< Ctrl-C >>. If you hit
C<< Ctrl-C >> again before the supervised process restart, the supervisor will
exit. This allows you to use one tap of C<< Ctrl-C >> to restart, and a
double tap to exit.


=head1 ARGUMENTS

The script accepts no arguments on the command line.


=head1 OPTIONS

The script doesn't have any command line options.


=head1 ENVIRONMENT

You can set the C<SUPERVISE_ME_DEBUG> environment variable to 1 to show
debug information about the internal workings of the supervisor.


=head1 SEE ALSO

L<App::SuperviseMe>
