#!/usr/bin/env perl

package    ## Hide from PAUSE and Dist::Zilla
  supervise_me;

use strict;
use warnings;

use Getopt::Std;
use YAML::Tiny;
use App::Sv;

# ABSTRACT: supervises a list of commands
# VERSION
# AUTHORITY

my %opt;
getopts('dc:', \%opt);

# read config
my $conf;
my $yt = YAML::Tiny->new();
if ($opt{c} && -f $opt{c}) {
	$conf = $yt->read($opt{c})
		or die "Cannot open config file \'$opt{c}\': $!";
	$conf = $conf->[0];
}
else {
	my $cf = $ENV{SV_HOME} ? "$ENV{SV_HOME}/sv.yml" : "$ENV{HOME}/.sv/sv.yml";
	die "No config file found" unless -f $cf;
	$conf = $yt->read($cf)
		or die "Cannot open config file \'$cf\': $!";
	$conf = $conf->[0];
}

# daemonize
if ($opt{d} || $conf->{global}->{daemon}) {
	open(STDIN, "</dev/null");
	open(STDOUT, "+>/dev/null");
	open(STDERR, "+>/dev/null");
	my $pid = fork();
	exit 0 if $pid;
}

my $s = App::Sv->new($conf);
$s->run;

__END__

=encoding utf8

=head1 SYNOPSIS

    # Read commands from a config file
    $ cat sv.yml
    ---
    global:
      listen: unix/:/tmp/super
      daemon: 0
    run:
      x: 'plackup -p 3010 ./sites/x/app.psgi'
      y:
        cmd: 'plackup -p 3011 ./sites/y/app.psgi'
        reload_signal: HUP
        start_delay: 1
        start_retries: 5
        stop_delay: 2
        stop_retries: 1
        stop_signal: TERM
        
    $ svd -c sv.yml
    
=head1 DESCRIPTION

The C<svd> command is a simple supervisor for multiple process.

It reads a list of commands to execute from a YAML config file and starts each
one, and then monitors their execution. If one of the program dies, the
supervisor will restart it after a preset delay.

You can restart the supervised process with C<< Ctrl-C >>. If you hit
C<< Ctrl-C >> again before the supervised process restart, the supervisor will
exit. This allows you to use one tap of C<< Ctrl-C >> to restart, and a
double tap to exit.


=head1 ARGUMENTS

The script accepts no arguments on the command line.


=head1 OPTIONS

The script accept the follwoing command line options.

=over 4

=item -c config_file

Specify the configuration file to read. If this isn't specified, the script
searches $ENV{SV_HOME}/sv.yml and $ENV{HOME}/.sv/sv.yml and dies upon failure
to find a valid configuration file in one of those places.

=item -d

Run as a daemon. This can be also specified in the global section of the
configuration file via tha daemon option (boolean).

=back

=head1 ENVIRONMENT

You can set the C<SV_DEBUG> environment variable to show debug information
about the internal workings of the supervisor. C<SV_HOME> sets the default
home directory where the configuration is located.


=head1 SEE ALSO

L<App::Sv>
